#transform the data and select the correct transformation
#create dummy variables for each month
#run a regression model with trand and trend^2
#calculate standardised betas and relative importace of each coefficient
#diagnose the regression model

i=4 #column with the time series variable
name=colnames(sector_df)[i]
variable = sector_df[,i]

#Boxplots
#if outliers then regression results are affected
par(mfrow=c(1,4))  # divide graph area in 2 columns
boxplot(variable, main="as is", col="light grey")
boxplot(log(variable), main="log", col="light grey")
boxplot((variable)^2, main="Square", col="light grey")
boxplot((variable)^0.5, main="Sq Root", col="light grey")
par(mfrow=c(1, 1))

#prepare df for regression
t = seq(from=1, to=nrow(sector_df), by=1)
df = data.frame("date"=sector_df$Month,
                 "month"=format(sector_df$Month,"%B"),
                 "actual"=sector_df[,i],
                 "log_actual"=log(sector_df[,i]),
                 "sq_actual"=sector_df[,i]^2,
                 "sqrt_actual"=sector_df[,i]^0.5,
                 "t"=t,
                 "t_exp"=t^2,
                 stringsAsFactors = TRUE)

#make dummy variables
df_dummy = dummy_cols(df, select_columns = "month")

    #select dependant variable
    dep_variable = df_dummy$sqrt_actual

    #reference month is June
    model_1 = lm(dep_variable ~ t + t_exp + month_February + month_March + month_April + month_May + month_June + month_July + month_August 
                 + month_September + month_October + month_November + month_December, data=df_dummy); print(name);
    summary(model_1)
    
    #relative importance of features, scaled to 100
    relative_imp = calc.relimp(model_1, type = "lmg", rela = TRUE); relative_imp
    
    #Standardized betas
    std_betas = lm.beta(model_1)
    std.betas = data.frame(std_betas)
    
    plot(model_1, which=1, col=c("blue"), sub=name) # Residuals vs Fitted Plot
    #residuals does not have any obvious pattern. it is slightly curved, but residuals are spread equally around the horizontal line without     #a distinct pattern. Indicates it is not a non-linear relationship.
    
    plot(model_1, which=2, col=c("red"), sub=name)  # Q-Q Plot
    #plot shows good alignment to the the line with a few points at the top slightly offset.
    #residuals are normally distributed
    
    plot(model_1, which=3, col=c("blue"), sub=name)
    #residuals are reasonably well spread above and below the horizontal line. Residuals have equal variance along the regression line.
    
    #test homoscedasticity
    olsrr::ols_test_breusch_pagan(model_1)
    
    #influential plot
    plot(model_1, which=5, col=c("blue"), sub=name)
    #68, 125 and 1 are influential
