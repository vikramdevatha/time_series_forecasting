forecast_function = function(series_train, series_test, horizon, p, d, q, P, D, Q){
  
  f_list = list()
  
  #naive forecasts
  f_naive = naive(series_train, horizon) 
  f_naive_summary = summary(f_naive)
  f_naive_autoplot = autoplot(f_naive, size=1.0) + geom_smooth() + geom_line(size=1.0) +
    labs(title="Naive forecasts", y = "USD, m", x = NULL) +
    autolayer(f_naive, series = "Forecasted value", size=1.0) +
    autolayer(series_test, series = "Actual value", size=1.0) +
    guides(colour=guide_legend(title="Forecast"))
  
  f_naive_residuals = checkresiduals(f_naive)
  f_naive_accuracy = accuracy(f_naive, series_test)
  naive_train_rmse = f_naive_accuracy[3]
  naive_test_rmse = f_naive_accuracy[4]
  
  #naive forecasts with seasonality
  f_snaive = snaive(series_train, horizon) 
  f_snaive_summary = summary(f_snaive)
  f_snaive_autoplot = autoplot(f_snaive, size=1.0) + geom_smooth() + geom_line(size=1.0) +
    labs(title="Naive forecasts with seasonality", y = "USD, m", x = NULL) +
    autolayer(f_snaive, series = "Forecasted value", size=1.0) +
    autolayer(series_test, series = "Actual value", size=1.0) +
    guides(colour=guide_legend(title="Forecast"))
  f_snaive_residuals = checkresiduals(f_snaive)
  f_snaive_accuracy = accuracy(f_snaive, series_test)
  snaive_train_rmse = f_snaive_accuracy[3]
  snaive_test_rmse = f_snaive_accuracy[4]
  
  #drift forecasts
  f_rwf = rwf(series_train, drift = TRUE, horizon)
  f_rwf_summary = summary(f_rwf)
  f_rwf_autoplot = autoplot(f_rwf, size=1.0) + geom_smooth() + geom_line(size=1.0)  +
    labs(title="Drift forecasts", y = "USD, m", x = NULL) +
    autolayer(f_rwf, series = "Forecasted value", size=1.0) +
    autolayer(series_test, series = "Actual value", size=1.0) +
    guides(colour=guide_legend(title="Forecast"))
  f_rwf_residuals = checkresiduals(f_rwf)
  f_rwf_accuracy = accuracy(f_rwf, series_test)
  rwf_train_rmse = f_rwf_accuracy[3]
  rwf_test_rmse = f_rwf_accuracy[4]
  
  #forecast with STL decomposition
  series_train_decomposed = stl(series_train, s.window=7)
  f_stl = series_train_decomposed %>% forecast(method="naive", h=horizon) #forecasts
  f_stl_residuals = checkresiduals(f_stl)
  f_stl_summary = summary(f_stl)
  f_stl_accuracy = accuracy(f_stl, series_test)
  f_stl_autoplot = series_train_decomposed %>% forecast(method="naive", h=horizon) %>%
    autoplot(size=1.0) + ylab("USD, m") + xlab("") +
    ggtitle("STL Forecasts plus Random Walk") +
    autolayer(f_stl, series="Forecast", size=1.0) +
    autolayer(series_test, series="Actual value Test", size=1.0)
  stl_train_rmse = f_stl_accuracy[3]
  stl_test_rmse = f_stl_accuracy[4]
  
  #HW single exponential model (with level only)
  f_HW_single_fit = HoltWinters(series_train, beta=FALSE, gamma=FALSE)
  f_HW_single = forecast(f_HW_single_fit, horizon) 
  f_HW_single_summary = summary(f_HW_single)
  f_HW_single_autoplot = autoplot(f_HW_single, size=1.0) + geom_smooth() + geom_line(size=1.0) +
    labs(title="HW Single Exponential forecasts", y = "USD, m", x = NULL) +
    autolayer(f_HW_single, series = "Forecasted value", size=1.0) +
    autolayer(series_test, series = "Actual value", size=1.0) +
    guides(colour=guide_legend(title="Forecast"))
  f_HW_single_residuals = checkresiduals(f_HW_single)
  f_HW_single_accuracy = accuracy(f_HW_single, series_test)
  HW_single_train_rmse = f_HW_single_accuracy[3]
  HW_single_test_rmse = f_HW_single_accuracy[4]
  
  #HW double exponential model (level and trend)
  f_HW_double_fit = HoltWinters(series_train, gamma=FALSE)
  f_HW_double = forecast(f_HW_double_fit, horizon)
  f_HW_double_summary = summary(f_HW_double)
  f_HW_double_autoplot = autoplot(f_HW_double, size=1.0) + geom_smooth() + geom_line(size=1.0) +
    labs(title="HW Double Exponential forecasts", y = "USD, m", x = NULL) +
    autolayer(f_HW_double, series = "Forecasted value", size=1.0) +
    autolayer(series_test, series = "Actual value", size=1.0) +
    guides(colour=guide_legend(title="Forecast"))
  f_HW_double_residuals = checkresiduals(f_HW_double)
  f_HW_double_accuracy = accuracy(f_HW_double, series_test)
  HW_double_train_rmse = f_HW_double_accuracy[3]
  HW_double_test_rmse = f_HW_double_accuracy[4]
  
  #HW triple exponential model (level, trend and seasonality)
  f_HW_triple_fit = HoltWinters(series_train)
  f_HW_triple = forecast(f_HW_triple_fit, horizon)
  f_HW_triple_summary = summary(f_HW_triple)
  f_HW_triple_autoplot = autoplot(f_HW_triple, size=1.0) + geom_smooth() + geom_line(size=1.0) +
    labs(title="HW Triple Exponential forecasts", y = "USD, m", x = NULL) +
    autolayer(f_HW_triple, series = "Forecasted value", size=1.0) +
    autolayer(series_test, series = "Actual value", size=1.0) +
    guides(colour=guide_legend(title="Forecast"))
  f_HW_triple_residuals = checkresiduals(f_HW_triple)
  f_HW_triple_accuracy = accuracy(f_HW_triple, series_test)
  HW_triple_train_rmse = f_HW_triple_accuracy[3]
  HW_triple_test_rmse = f_HW_triple_accuracy[4]
  
  #ARIMA forecast
  series_train_arima = Arima(series_train, order=c(p, d, q), seasonal=c(P, D, Q))
  f_arima = series_train_arima %>% forecast(h=no_forecasts) #forecasts
  f_arima_residuals = checkresiduals(f_arima)
  f_arima_summary = summary(f_arima)
  f_arima_accuracy = accuracy(f_arima, series_test)
  arima_train_rmse = f_arima_accuracy[3]
  arima_test_rmse = f_arima_accuracy[4]

  f_arima_autoplot = series_train_arima %>% forecast(h=no_forecasts) %>% 
    autoplot(size=1.0) + ylab("USD m") + xlab("") +
    ggtitle("ARIMA forecasts") +
    autolayer(f_arima, series="Forecast", size=1.0) +
    autolayer(series_test, series="Actual value Test", size=1.0)
  
  f_list = list("naive_summary"=data.frame(f_naive_summary), 
                "naive_autoplot"=f_naive_autoplot, 
                "naive_residuals"=f_naive_residuals, 
                "naive_accuracy"=f_naive_accuracy,
                "naive_train_rmse" = naive_train_rmse,
                "naive_test_rmse" = naive_test_rmse,
                
                "snaive_summary"=f_snaive_summary, 
                "snaive_autoplot"=f_snaive_autoplot, 
                "snaive_residuals"=f_snaive_residuals, 
                "snaive_accuracy"=f_snaive_accuracy, 
                "snaive_train_rmse" = snaive_train_rmse,
                "snaive_test_rmse" = snaive_test_rmse,
                
                "drift_summary"= f_rwf_summary, 
                "drift_autoplot"=f_rwf_autoplot, 
                "drift_residuals"=f_rwf_residuals, 
                "drift_accuracy"=f_rwf_accuracy,
                "rwf_train_rmse" = rwf_train_rmse,
                "rwf_test_rmse" = rwf_test_rmse,
                
                "stl_summary"=f_stl_summary, 
                "stl_autoplot"=f_stl_autoplot, 
                "stl_residuals"=f_stl_residuals, 
                "stl_accuracy"=f_stl_accuracy,
                "stl_train_rmse" = stl_train_rmse,
                "stl_test_rmse" = stl_test_rmse,
                
                "HW_single_summary"=f_HW_single_summary, 
                "HW_single_autoplot"=f_HW_single_autoplot, 
                "HW_single_residuals"=f_HW_single_residuals, 
                "HW_single_accuracy"=f_HW_single_accuracy,
                "HW_single_train_rmse" = HW_single_train_rmse,
                "HW_single_test_rmse" = HW_single_test_rmse,
                
                "HW_double_summary"=f_HW_double_summary, 
                "HW_double_autoplot"=f_HW_double_autoplot, 
                "HW_double_residuals"=f_HW_double_residuals, 
                "HW_double_accuracy"=f_HW_double_accuracy,
                "HW_double_train_rmse" = HW_double_train_rmse,
                "HW_double_test_rmse" = HW_double_test_rmse,
                
                "HW_triple_summary"=f_HW_triple_summary, 
                "HW_triple_autoplot"=f_HW_triple_autoplot, 
                "HW_triple_residuals"=f_HW_triple_residuals, 
                "HW_triple_accuracy"=f_HW_triple_accuracy,
                "HW_triple_train_rmse" = HW_triple_train_rmse,
                "HW_triple_test_rmse" = HW_triple_test_rmse,
  
                "arima_summary"=f_arima_summary, 
                "arima_autoplot"=f_arima_autoplot, 
                "arima_residuals"=f_arima_residuals, 
                "arima_accuracy"=f_arima_accuracy,
                "arima_train_rmse" = arima_train_rmse,
                "arima_test_rmse" = arima_test_rmse)
  
  return(f_list)
}
